"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const log_1 = require("@serverless/utils/log");
const getCredentials_1 = __importDefault(require("./utils/getCredentials"));
const evaluateBoolean_1 = __importDefault(require("./utils/evaluateBoolean"));
class ServerlessBetterCredentials {
    constructor(serverless) {
        this.hooks = {};
        this.serverless = serverless;
        this.provider = this.serverless.getProvider('aws');
        if (!this.provider) {
            log_1.log.error('serverless-better-credentials: only AWS is supported');
            return;
        }
        this.provider.getCredentials = getCredentials_1.default;
        log_1.log.debug('serverless-better-credentials: provider.getCredentials patched');
        this.hooks = { initialize: () => this.init() };
    }
    async init() {
        var _a, _b;
        if (!(0, evaluateBoolean_1.default)((_b = (_a = this.serverless.service.custom) === null || _a === void 0 ? void 0 : _a.betterCredentials) === null || _b === void 0 ? void 0 : _b.enabled, true)) {
            log_1.log.debug('serverless-better-credentials: plugin is disabled - skipping');
            return;
        }
        // Serverless treats the credentials object as if it is a synchronous and static map of
        // { accessKeyId, secretAccessKey, sessionToken? }.
        // However many types of AWS credentials mutate (refresh) over time and are asynchronous on
        // first access.
        // By running getPromise() on the (awaited) plug-in initialisation we can mimic an environment
        // where the key id, secret and token are set immediately, while still providing a valid
        // credentials class for the aws-sdk, etc. that supports refreshing.
        const { credentials } = this.provider.getCredentials();
        // It seems we're not the only plugin messing with the credentials object.
        // Guard against unexpected usage.
        // https://github.com/thomasmichaelwallace/serverless-better-credentials/issues/5
        if (!credentials
            || typeof credentials !== 'object'
            || typeof credentials.getPromise !== 'function') {
            log_1.log.warning('serverless-better-credentials: another plugin has changed the credentials object - skipping');
            return;
        }
        await credentials.getPromise();
    }
}
exports.default = ServerlessBetterCredentials;
//# sourceMappingURL=ServerlessBetterCredentials.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const thruCache_1 = __importDefault(require("../utils/thruCache"));
const MAX_WAIT_TIME = 10 * 60 * 1000; // give people ten minutes
function isValidClientInfo(j) {
    if (j === undefined || j === null)
        return false;
    if (typeof j !== 'object')
        return false;
    if (!('clientId' in j && 'clientSecret' in j && 'clientSecretExpiresAt' in j))
        return false;
    if (typeof j.clientId !== 'string')
        return false;
    if (typeof j.clientSecret !== 'string')
        return false;
    if (typeof j.clientSecretExpiresAt !== 'number')
        return false;
    const expiresAt = j.clientSecretExpiresAt * 1000;
    if (Number.isNaN(expiresAt))
        return false;
    if ((expiresAt - Date.now()) < MAX_WAIT_TIME)
        return false; // expired, or will expire soon
    return true;
}
function getClientInfo(service, params) {
    // it looks as though SSOOIDC is cached per-region
    const clientFile = `better-serverless-credentials-id-${params.region}.json`;
    const cachePath = path_1.default.join(params.cacheBasePath, clientFile);
    return (0, thruCache_1.default)(cachePath, isValidClientInfo, async () => {
        const clientName = `better-serverless-credentials-client-${Math.floor(Date.now() / 1000)}`;
        const clientInfo = await service.registerClient({ clientName, clientType: 'public' }).promise();
        return clientInfo;
    });
}
exports.default = getClientInfo;
//# sourceMappingURL=getClientInfo.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSsoProfileConfig = void 0;
const util_1 = __importDefault(require("aws-sdk/lib/util"));
const configOptInEnv = 'AWS_SDK_LOAD_CONFIG';
const sharedConfigFileEnv = 'AWS_CONFIG_FILE';
const sharedCredentialsFileEnv = 'AWS_SHARED_CREDENTIALS_FILE';
function isSsoProfileConfig(c) {
    if (c === undefined || c === null)
        return false;
    if (typeof c !== 'object')
        return false;
    if (!('sso_account_id' in c
        && 'sso_region' in c
        && 'sso_role_name' in c
        && 'sso_start_url' in c))
        return false;
    if (typeof c.sso_account_id !== 'string')
        return false;
    if (typeof c.sso_region !== 'string')
        return false;
    if (typeof c.sso_role_name !== 'string')
        return false;
    if (typeof c.sso_start_url !== 'string')
        return false;
    return true;
}
exports.isSsoProfileConfig = isSsoProfileConfig;
const getProfilesFromCredentialsFile = (iniLoader, filename) => {
    const credentialsFilename = filename
        || (process.env[configOptInEnv] && (process.env[sharedCredentialsFileEnv]
            || iniLoader.getDefaultFilePath(false)));
    try {
        const config = iniLoader.loadFrom({
            filename: credentialsFilename,
        });
        return config;
    }
    catch (error) {
        // if using config, assume it is fully descriptive without a credentials file:
        if (!process.env[configOptInEnv])
            throw error;
    }
    return {};
};
const getProfilesFromConfigFile = (iniLoader) => {
    const configFilename = process.env[sharedConfigFileEnv] || iniLoader.getDefaultFilePath(true);
    const config = iniLoader.loadFrom({
        isConfig: true,
        filename: configFilename,
    });
    return config;
};
const fillProfilesFromConfiguration = (configuration, profiles) => {
    const updatedProfiles = Object.entries(configuration).reduce((acc, [profileName, profile]) => ({
        ...acc,
        [profileName]: { ...acc[profileName], ...profile },
    }), profiles);
    return updatedProfiles;
};
const getSsoSessions = (iniLoader, filename) => {
    const filenameForSessions = filename
        || process.env[sharedConfigFileEnv]
        || iniLoader.getDefaultFilePath(true);
    const config = iniLoader.loadSsoSessionsFrom ? iniLoader.loadSsoSessionsFrom({
        filename: filenameForSessions,
    }) : {};
    return config;
};
const addSsoDataToProfiles = (sessionConfiguration, profiles) => {
    const profilesWithSessionData = profiles;
    Object.entries(profiles).forEach(([profileName, profile]) => {
        Object.entries(sessionConfiguration).forEach(([ssoSessionName, session]) => {
            if (ssoSessionName === profile.sso_session) {
                profilesWithSessionData[profileName] = {
                    ...profile,
                    sso_start_url: session.sso_start_url,
                    sso_region: session.sso_region,
                };
            }
        });
    });
    return profilesWithSessionData;
};
/** Fork of AWSUtil.getProfilesFromSharedConfig with SSO sessions handling */
const getProfilesFromSsoConfig = (iniLoader, filename) => {
    const configurations = {
        profilesFromConfig: getProfilesFromConfigFile(iniLoader),
        profilesFromCredentials: getProfilesFromCredentialsFile(iniLoader, filename),
        ssoSessions: getSsoSessions(iniLoader, filename),
    };
    const profilesFromConfig = fillProfilesFromConfiguration(configurations.profilesFromConfig, {});
    const allProfiles = fillProfilesFromConfiguration(configurations.profilesFromCredentials, profilesFromConfig);
    const profilesWithSsoData = addSsoDataToProfiles(configurations.ssoSessions, allProfiles);
    return profilesWithSsoData;
};
function getSsoConfig(options) {
    if (!options.profile) {
        throw new Error('Cannot load SSO credentials without a profile');
    }
    const profiles = getProfilesFromSsoConfig(util_1.default.iniLoader, options.filename);
    const config = profiles[options.profile];
    if (!isSsoProfileConfig(config)) {
        throw new Error(`Profile ${options.profile} does not have valid SSO credentials. Required `
            + 'parameters "sso_account_id", "sso_region", "sso_role_name", '
            + '"sso_start_url". Reference: '
            + 'https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html');
    }
    return config;
}
exports.default = getSsoConfig;
//# sourceMappingURL=getSsoConfig.js.map
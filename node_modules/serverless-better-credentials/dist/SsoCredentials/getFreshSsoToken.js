"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const log_1 = require("@serverless/utils/log");
const open_1 = __importDefault(require("open"));
const isAwsError_1 = __importDefault(require("../utils/isAwsError"));
function isFullDeviceAuthResponse(r) {
    return !!(r.verificationUri && r.verificationUriComplete
        && r.userCode && r.deviceCode
        && r.interval);
}
function toSSOToken(params, response) {
    if (!response.accessToken)
        throw new Error('Failed to get access token');
    if (!response.expiresIn)
        throw new Error('Failed to get access token expiration');
    const expiresAt = new Date(Date.now() + response.expiresIn * 1000);
    return {
        startUrl: params.startUrl,
        region: params.region,
        accessToken: response.accessToken,
        expiresAt: expiresAt.toISOString(),
    };
}
const delay = async (ms) => new Promise((r) => { setTimeout(r, ms); });
const getSsoMessage = (url, code) => `
[serverless-better-credentials]

Attempting to automatically open the SSO authorization page in your default browser.
If the browser does not open or you wish to use a different device to authorize this request, open the following URL:

${url}

Then enter the code:

${code}
`;
async function waitForToken(service, clientInfo, prompt) {
    let waitTime = prompt.interval * 1000;
    try {
        const token = await service.createToken({
            clientId: clientInfo.clientId,
            clientSecret: clientInfo.clientSecret,
            deviceCode: prompt.deviceCode,
            grantType: 'urn:ietf:params:oauth:grant-type:device_code',
        }).promise();
        return token;
    }
    catch (e) {
        if (!(0, isAwsError_1.default)(e))
            throw e;
        if (e.code === 'AuthorizationPendingException') {
            // expected
        }
        else if (e.code === 'SlowDownException') {
            waitTime += (e.retryDelay || prompt.interval) * 1000;
        }
        else {
            throw (e);
        }
    }
    await delay(waitTime);
    return waitForToken(service, clientInfo, prompt);
}
async function getFreshSsoToken(service, clientInfo, params) {
    const prompt = await service.startDeviceAuthorization({
        clientId: clientInfo.clientId,
        clientSecret: clientInfo.clientSecret,
        startUrl: params.startUrl,
    }).promise();
    if (!isFullDeviceAuthResponse(prompt)) {
        throw new Error('Failed to start device authorization');
    }
    const message = getSsoMessage(prompt.verificationUri, prompt.userCode);
    log_1.log.notice(message);
    try {
        await (0, open_1.default)(prompt.verificationUriComplete);
    }
    catch (_) {
        // failed to open browser
    }
    const token = await waitForToken(service, clientInfo, prompt);
    return toSSOToken(params, token);
}
exports.default = getFreshSsoToken;
//# sourceMappingURL=getFreshSsoToken.js.map
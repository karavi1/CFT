"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const util_1 = __importDefault(require("aws-sdk/lib/util"));
const path_1 = __importDefault(require("path"));
const isAwsError_1 = __importDefault(require("../utils/isAwsError"));
const getSsoConfig_1 = __importDefault(require("./getSsoConfig"));
const getSsoToken_1 = __importDefault(require("./getSsoToken"));
function handleError(e, callback) {
    if ((0, isAwsError_1.default)(e)) {
        callback(e);
    }
    else if (e instanceof Error) {
        const err = e instanceof Error ? e : new Error('An unknown error occurred');
        callback(util_1.default.error(err, { code: 'SsoCredentialsProviderFailure' }));
    }
}
function isFullRoleCredentials(c) {
    if (!c)
        return false;
    if (!c.accessKeyId)
        return false;
    if (!c.secretAccessKey)
        return false;
    if (!c.sessionToken)
        return false;
    if (!c.expiration)
        return false;
    return true;
}
class SsoCredentials extends aws_sdk_1.default.Credentials {
    constructor(options) {
        super('ACCESS_KEY_ID', 'SECRET_ACCESS_KEY');
        this.expired = true; // force refresh based on chain
        this.filename = options.filename;
        this.profile = options.profile;
    }
    load(callback) {
        try {
            // get valid config, or throw
            const config = (0, getSsoConfig_1.default)({ filename: this.filename, profile: this.profile });
            // get access token
            if (!this.ssoOidcService || this.ssoOidcService.config.region !== config.sso_region) {
                this.ssoOidcService = new aws_sdk_1.default.SSOOIDC({ region: config.sso_region });
            }
            const getSsoTokenParams = {
                cacheBasePath: path_1.default.join(util_1.default.iniLoader.getHomeDir(), '.aws', 'sso', 'cache'),
                region: config.sso_region,
                startUrl: config.sso_start_url,
            };
            (0, getSsoToken_1.default)(this.ssoOidcService, getSsoTokenParams)
                .then((token) => {
                // get sso role
                if (!this.ssoService || this.ssoService.config.region !== config.sso_region) {
                    this.ssoService = new aws_sdk_1.default.SSO({ region: config.sso_region });
                }
                const getRoleCredentialsParams = {
                    accessToken: token.accessToken,
                    accountId: config.sso_account_id,
                    roleName: config.sso_role_name,
                };
                return this.ssoService.getRoleCredentials(getRoleCredentialsParams).promise();
            })
                .then(({ roleCredentials }) => {
                if (!isFullRoleCredentials(roleCredentials)) {
                    throw new Error('An error occurred fetching SSO credentials role');
                }
                this.expired = false;
                this.accessKeyId = roleCredentials.accessKeyId;
                this.secretAccessKey = roleCredentials.secretAccessKey;
                this.sessionToken = roleCredentials.sessionToken;
                this.expireTime = new Date(roleCredentials.expiration);
                callback();
            })
                .catch((e) => { handleError(e, callback); });
        }
        catch (e) {
            handleError(e, callback);
        }
    }
    refresh(callback) {
        util_1.default.iniLoader.clearCachedFiles();
        // @ts-expect-error : coalesceRefresh is a private method
        this.coalesceRefresh(callback || util_1.default.fn.callback); // eslint-disable-line @typescript-eslint/no-unsafe-call, max-len
    }
}
exports.default = SsoCredentials;
//# sourceMappingURL=index.js.map
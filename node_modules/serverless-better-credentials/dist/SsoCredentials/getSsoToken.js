"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = __importDefault(require("crypto"));
const path_1 = __importDefault(require("path"));
const thruCache_1 = __importDefault(require("../utils/thruCache"));
const getClientInfo_1 = __importDefault(require("./getClientInfo"));
const getFreshSsoToken_1 = __importDefault(require("./getFreshSsoToken"));
const MAX_WAIT_TIME = 10 * 60 * 1000; // give people ten minutes
function isValidSSOToken(j) {
    if (j === undefined || j === null)
        return false;
    if (typeof j !== 'object')
        return false;
    if (!('accessToken' in j && 'expiresAt' in j))
        return false;
    if (typeof j.accessToken !== 'string')
        return false;
    const expiresAt = Date.parse(j.expiresAt);
    if (Number.isNaN(expiresAt))
        return false;
    if ((expiresAt - Date.now()) < MAX_WAIT_TIME)
        return false; // expired, or will expire soon
    return true;
}
async function getSsoToken(service, params) {
    const hasher = crypto_1.default.createHash('sha1');
    const cacheFile = `${hasher.update(params.startUrl).digest('hex')}.json`;
    const cachePath = path_1.default.join(params.cacheBasePath, cacheFile);
    return (0, thruCache_1.default)(cachePath, isValidSSOToken, async () => {
        const clientInfo = await (0, getClientInfo_1.default)(service, params);
        const token = await (0, getFreshSsoToken_1.default)(service, clientInfo, params);
        return token;
    });
}
exports.default = getSsoToken;
//# sourceMappingURL=getSsoToken.js.map